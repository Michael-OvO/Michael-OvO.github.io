<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Michael's blog</title><link>https://michael-ovo.github.io/post/</link><description>Recent content in Posts on Michael's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 27 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://michael-ovo.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>AP CS Exam Notes 2021-10-28</title><link>https://michael-ovo.github.io/p/apcs-notes/</link><pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate><guid>https://michael-ovo.github.io/p/apcs-notes/</guid><description>第一题修改代码 很简单的 10进制转2进制，用的也是常规方法
附上考试时调出来的代码：
import java.util.*; public class base { public static void main(String[] args) { int n,a,count0=0, count1=0; String s=&amp;#34;&amp;#34;; Scanner sc=new Scanner(System.in); System.out.println(&amp;#34;number&amp;#34;); n=sc.nextInt(); while(n&amp;gt;0){ a=n%2; if(a==1){ count1++; }else{ count0++; } n=n/2; s=a+&amp;#34; &amp;#34;+s; } System.out.println(&amp;#34;Bin number is &amp;#34;+s); System.out.println(&amp;#34;0count &amp;#34;+count0); System.out.println(&amp;#34;1count &amp;#34;+count1); } } 有些人的卷子上写的是
count1--; 需要改成
count1++; 另外在进制转时需要倒序排列数字，所以需要改成：
s=a+&amp;#34; &amp;#34;+s; 同时将语句将else里移出来，这题就调好了。
第二部分 选择题 Question 1 What are the values of a and b after the for loop finishes?</description></item><item><title>CF384A</title><link>https://michael-ovo.github.io/p/cf384a/</link><pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate><guid>https://michael-ovo.github.io/p/cf384a/</guid><description>CF384A 洛谷传送门
原题传送门
本菜鸡的第 $99$ 道橙题，心血来潮写一篇题解。
题意 一种棋的规则是：在一个棋盘中，与该棋子相邻的上，下，左，右，$4$ 个格子中不能有棋子出现。
给出一个 $n \times n$ 的棋盘，首先输出在这个棋盘中最多能放多少个棋子，并输出一种最大的可行的摆放方案。
解法$1$ 纯暴力模拟 通过画图观察规律。
$$n=2$$
C. .C $$n=3$$
C.C .C. C.C $$n=4$$
C.C. .C.C C.C. .C.C $$n=5$$
C.C.C .C.C. C.C.C .C.C. C.C.C 我们发现，当坐标为第偶数行，偶数列时落子，或者在第奇数行，第奇数列落子，得到的一定是最优解。
那么就可以根据这个思路通过创建一个二维字符组模拟棋子摆放的过程。 因为 $n$ 的数据范围很小，所以这样的方法虽然时间复杂度较高，但是也是可行的。
第一种解法代码 #include&amp;lt;bits/stdc++.h&amp;gt; using namespace std; char board[2000][2000];//存储棋盘状态 int cnt; int main() { ios::sync_with_stdio(0); cin.tie(0); int n; cin&amp;gt;&amp;gt;n; //i代表行,j代表列 for(int i=1;i&amp;lt;=n;i++){ for(int j=1;j&amp;lt;=n;j++){ if((i%2&amp;amp;&amp;amp;j%2)||!(i%2^j%2))board[i][j]=&amp;#39;C&amp;#39;,cnt++; //判断是否可以落子 else board[i][j]=&amp;#39;.&amp;#39;;//否则不下子 } } cout&amp;lt;&amp;lt;cnt&amp;lt;&amp;lt;endl; for(int i=1;i&amp;lt;=n;i++){ for(int j=1;j&amp;lt;=n;j++){ cout&amp;lt;&amp;lt;board[i][j]; //输出棋盘 } cout&amp;lt;&amp;lt;endl; } } 解法 $2$ 优化暴力 但是刚刚的解法需要先存储，再输出一遍，比较浪费时间，还是有可以优化的空间。</description></item><item><title>CF899b</title><link>https://michael-ovo.github.io/p/cf899b/</link><pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate><guid>https://michael-ovo.github.io/p/cf899b/</guid><description>CF899B Months and Years 原题传送门
洛谷传送门
这可能是目前最暴力的一篇题解了。。
题目其实很简单，给出几个连续月份的天数，判断是否合法
好端端的一道模拟题就这么被打表暴力过了
不过确实，与其说写一堆复杂的判断和模拟，打表所需的代码量少之又少。
思路 首先自己创建好连续几年（需要包含平年和闰年的数据，因为题目中的月份数最多会达到 $24$）每个月天数的数据。
&amp;#34;31 28 31 30 31 30 31 31 30 31 30 31 31 28 31 30 31 30 31 31 30 31 30 31 31 29 31 30 31 30 31 31 30 31 30 31 31 28 31 30 31 30 31 31 30 31 30 31 31 28 31 30 31 30 31 31 30 31 30 31 &amp;#34; 随后，我们只需要原封不动的读入字符串，再用 find() 函数直接判断是否为我们提前创建好的字符串中的一个子串即可。</description></item><item><title>Chemistry Midterm Notes</title><link>https://michael-ovo.github.io/p/notes/</link><pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate><guid>https://michael-ovo.github.io/p/notes/</guid><description>Midterm Study Guide (2021-2022 School Year) What is chemistry the study of the properties and behavior of matter
What is matter matter is any substance that has mass and takes up space by having volume.
Chemical vs. Physical Property Table of Physical Property vs. Chemical Property
Physical Properties:
Examples: Boiling point, Density, Mass, and Volume Chemical Properties:
Examples: Flammability, Corrosiveness, or Reactivity with acids Chemical vs.</description></item><item><title>rich content</title><link>https://michael-ovo.github.io/p/rich_content/</link><pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate><guid>https://michael-ovo.github.io/p/rich_content/</guid><description>&lt;p>Hugo ships with several &lt;a class="link" href="https://gohugo.io/content-management/shortcodes/#use-hugo-s-built-in-shortcodes" target="_blank" rel="noopener"
>Built-in Shortcodes&lt;/a> for rich content, along with a &lt;a class="link" href="https://gohugo.io/about/hugo-and-gdpr/" target="_blank" rel="noopener"
>Privacy Config&lt;/a> and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.&lt;/p></description></item><item><title>Chinese Test</title><link>https://michael-ovo.github.io/p/test-chinese/</link><pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate><guid>https://michael-ovo.github.io/p/test-chinese/</guid><description>正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。
奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。
引用 思念是最暖的忧伤像一双翅膀
让我停不了飞不远在过往游荡
不告而别的你 就算为了我着想
这么沉痛的呵护 我怎么能翱翔
最暖的憂傷 - 田馥甄
图片 Photo by Florian Klauer on Unsplash Photo by Luca Bravo on Unsplash</description></item><item><title>Markdown Syntax Guide</title><link>https://michael-ovo.github.io/p/markdown-syntax-guide/</link><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate><guid>https://michael-ovo.github.io/p/markdown-syntax-guide/</guid><description>&lt;p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p></description></item><item><title>Placeholder Text</title><link>https://michael-ovo.github.io/p/placeholder-text/</link><pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate><guid>https://michael-ovo.github.io/p/placeholder-text/</guid><description>&lt;p>Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p></description></item><item><title>Math Typesetting</title><link>https://michael-ovo.github.io/p/math-typesetting/</link><pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate><guid>https://michael-ovo.github.io/p/math-typesetting/</guid><description>&lt;p>Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p></description></item><item><title>Emoji Support</title><link>https://michael-ovo.github.io/p/emoji-support/</link><pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate><guid>https://michael-ovo.github.io/p/emoji-support/</guid><description>&lt;p>Emoji can be enabled in a Hugo project in a number of ways.&lt;/p></description></item></channel></rss>